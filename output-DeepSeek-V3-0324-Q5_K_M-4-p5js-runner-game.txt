Make me a captivating endless runner game. Key instructions on the screen. p5js scene, no HTML. I like pixelated dinosaurs and interesting backgrounds.# Pixel Dino Endless Runner

Here's a captivating endless runner game featuring a pixelated dinosaur with interesting parallax backgrounds. The game includes on-screen instructions and is entirely contained within a p5.js sketch (no HTML needed).

```javascript
function setup() {
  createCanvas(800, 400);
  pixelDensity(1);
  noSmooth();
  
  // Initialize game objects
  initGame();
}

function draw() {
  // Game state management
  if (gameState === 'menu') {
    drawMenu();
  } else if (gameState === 'playing') {
    updateGame();
    drawGame();
  } else if (gameState === 'gameOver') {
    drawGameOver();
  }
}

function keyPressed() {
  // Space or up arrow to jump/start game
  if ((key === ' ' || keyCode === UP_ARROW) && dino.velocityY === 0) {
    if (gameState === 'menu') {
      gameState = 'playing';
    } else if (gameState === 'playing') {
      dino.jump();
    } else if (gameState === 'gameOver') {
      initGame();
      gameState = 'playing';
    }
  }
  
  // Down arrow to duck
  if (keyCode === DOWN_ARROW && gameState === 'playing') {
    dino.duck(true);
  }
}

function keyReleased() {
  if (keyCode === DOWN_ARROW && gameState === 'playing') {
    dino.duck(false);
  }
}

// Game variables
let gameState = 'menu';
let score = 0;
let highScore = 0;
let gameSpeed = 5;
let groundHeight = 50;
let clouds = [];
let mountains = [];
let obstacles = [];
let dino;
let groundTiles = [];
let stars = [];

// Initialize game objects
function initGame() {
  score = 0;
  gameSpeed = 5;
  
  // Create dino
  dino = {
    x: 100,
    y: height - groundHeight - 30,
    width: 40,
    height: 60,
    velocityY: 0,
    gravity: 0.8,
    jumpForce: -15,
    isDucking: false,
    duckHeight: 30,
    normalHeight: 60,
    animationFrame: 0,
    
    jump: function() {
      if (this.y === height - groundHeight - this.height) {
        this.velocityY = this.jumpForce;
      }
    },
    
    duck: function(isDucking) {
      this.isDucking = isDucking;
      if (isDucking) {
        this.height = this.duckHeight;
        this.y = height - groundHeight - this.height;
      } else {
        this.height = this.normalHeight;
        this.y = height - groundHeight - this.height;
      }
    },
    
    update: function() {
      // Apply gravity
      this.velocityY += this.gravity;
      this.y += this.velocityY;
      
      // Ground collision
      if (this.y > height - groundHeight - this.height) {
        this.y = height - groundHeight - this.height;
        this.velocityY = 0;
      }
      
      // Animation
      if (this.y < height - groundHeight - this.height || this.isDucking) {
        this.animationFrame = 0; // Reset to standing frame when jumping or ducking
      } else {
        this.animationFrame = (frameCount % 20 < 10) ? 1 : 2; // Alternate between run frames
      }
    },
    
    draw: function() {
      push();
      noStroke();
      
      // Draw dino based on state
      if (this.isDucking) {
        // Ducking dino (pixel art)
        fill(100, 100, 100);
        rect(this.x, this.y, this.width, this.height);
        
        // Head
        fill(80, 80, 80);
        rect(this.x + 10, this.y - 5, 20, 10);
        
        // Eye
        fill(255);
        rect(this.x + 25, this.y - 3, 3, 3);
        
        // Legs
        fill(100, 100, 100);
        rect(this.x + 5, this.y + this.height - 10, 10, 10);
        rect(this.x + 25, this.y + this.height - 10, 10, 10);
      } else {
        // Standing/running dino (pixel art)
        fill(100, 100, 100);
        rect(this.x, this.y, this.width, this.height);
        
        // Head
        fill(80, 80, 80);
        rect(this.x + 25, this.y - 15, 15, 15);
        
        // Eye
        fill(255);
        rect(this.x + 35, this.y - 10, 3, 3);
        
        // Tail
        fill(100, 100, 100);
        if (this.animationFrame === 1) {
          triangle(this.x - 10, this.y + 10, this.x, this.y + 10, this.x, this.y + 20);
        } else {
          triangle(this.x - 5, this.y + 10, this.x, this.y + 10, this.x, this.y + 20);
        }
        
        // Legs
        if (this.animationFrame === 1) {
          // First run frame
          rect(this.x + 5, this.y + this.height - 15, 10, 15);
          rect(this.x + 25, this.y + this.height - 10, 10, 10);
        } else {
          // Second run frame or standing
          rect(this.x + 5, this.y + this.height - 10, 10, 10);
          rect(this.x + 25, this.y + this.height - 15, 10, 15);
        }
      }
      
      pop();
    },
    
    checkCollision: function(obstacle) {
      // Simple AABB collision detection
      return (this.x < obstacle.x + obstacle.width &&
              this.x + this.width > obstacle.x &&
              this.y < obstacle.y + obstacle.height &&
              this.y + this.height > obstacle.y);
    }
  };
  
  // Create clouds
  clouds = [];
  for (let i = 0; i < 5; i++) {
    clouds.push({
      x: random(width),
      y: random(50, 150),
      width: random(60, 100),
      speed: random(0.5, 1.5)
    });
  }
  
  // Create mountains
  mountains = [];
  for (let i = 0; i < 3; i++) {
    mountains.push({
      x: random(width),
      width: random(100, 200),
      height: random(50, 120),
      speed: random(0.2, 0.5)
    });
  }
  
  // Create stars
  stars = [];
  for (let i = 0; i < 50; i++) {
    stars.push({
      x: random(width),
      y: random(50, 150),
      size: random(1, 3),
      speed: random(0.1, 0.3)
    });
  }
  
  // Create ground tiles
  groundTiles = [];
  const tileWidth = 50;
  const numTiles = ceil(width / tileWidth) + 1;
  for (let i = 0; i < numTiles; i++) {
    groundTiles.push({
      x: i * tileWidth
    });
  }
  
  // Initialize obstacles
  obstacles = [];
}

function updateGame() {
  // Update dino
  dino.update();
  
  // Update clouds (parallax background)
  for (let cloud of clouds) {
    cloud.x -= cloud.speed;
    if (cloud.x < -cloud.width) {
      cloud.x = width;
      cloud.y = random(50, 150);
    }
  }
  
  // Update mountains (parallax background)
  for (let mountain of mountains) {
    mountain.x -= mountain.speed;
    if (mountain.x < -mountain.width) {
      mountain.x = width;
      mountain.height = random(50, 120);
    }
  }
  
  // Update stars (parallax background)
  for (let star of stars) {
    star.x -= star.speed;
    if (star.x < -5) {
      star.x = width;
      star.y = random(50, 150);
    }
  }
  
  // Update ground tiles
  for (let i = 0; i < groundTiles.length; i++) {
    groundTiles[i].x -= gameSpeed;
    if (groundTiles[i].x < -50) {
      groundTiles[i].x = width;
    }
  }
  
  // Update obstacles
  for (let i = obstacles.length - 1; i >= 0; i--) {
    obstacles[i].x -= gameSpeed;
    
    // Check collision
    if (dino.checkCollision(obstacles[i])) {
      gameState = 'gameOver';
      if (score > highScore) {
        highScore = score;
      }
    }
    
    // Remove off-screen obstacles
    if (obstacles[i].x < -obstacles[i].width) {
      obstacles.splice(i, 1);
    }
  }
  
  // Add new obstacles
  if (frameCount % 90 === 0 && random() < 0.3) {
    addObstacle();
  }
  
  // Increase score and difficulty
  if (frameCount % 5 === 0) {
    score++;
    if (score % 100 === 0) {
      gameSpeed += 0.2;
    }
  }
}

function addObstacle() {
  const types = ['cactus', 'bird'];
  const type = random(types);
  
  if (type === 'cactus') {
    const sizes = ['small', 'medium', 'large'];
    const size = random(sizes);
    
    let width, height;
    if (size === 'small') {
      width = 20;
      height = 40;
    } else if (size === 'medium') {
      width = 30;
      height = 60;
    } else { // large
      width = 40;
      height = 80;
    }
    
    obstacles.push({
      x: width,
      y: height - groundHeight - height,
      width: width,
      height: height,
      type: 'cactus',
      size: size
    });
  } else if (type === 'bird') {
    obstacles.push({
      x: width,
      y: random(height - groundHeight - 100, height - groundHeight - 50),
      width: 40,
      height: 20,
      type: 'bird',
      animationFrame: 0
    });
  }
}

function drawMenu() {
  // Sky gradient
  drawSky();
  
  // Draw ground
  drawGround();
  
  // Draw mountains
  drawMountains();
  
  // Draw clouds
  drawClouds();
  
  // Draw stars
  drawStars();
  
  // Draw dino (standing)
  dino.draw();
  
  // Draw title
  push();
  textSize(32);
  textStyle(BOLD);
  fill(50);
  textAlign(CENTER, CENTER);
  text('PIXEL DINO RUNNER', width/2, 100);
  
  // Draw instructions
  textSize(16);
  text('Press SPACE or UP ARROW to jump', width/2, 150);
  text('Press DOWN ARROW to duck', width/2, 180);
  text('Press SPACE to start', width/2, 250);
  
  // Draw high score if available
  if (highScore > 0) {
    textSize(20);
    text('High Score: ' + highScore, width/2, 300);
  }
  pop();
}

function drawGame() {
  // Sky gradient
  drawSky();
  
  // Draw stars
  drawStars();
  
  // Draw mountains
  drawMountains();
  
  // Draw clouds
  drawClouds();
  
  // Draw ground
  drawGround();
  
  // Draw obstacles
  for (let obstacle of obstacles) {
    push();
    noStroke();
    
    if (obstacle.type === 'cactus') {
      // Draw cactus (pixel art)
      fill(80, 120, 80);
      rect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
      
      // Add some details
      fill(60, 100, 60);
      if (obstacle.size === 'small') {
        rect(obstacle.x + 5, obstacle.y - 5, 10, 5);
      } else if (obstacle.size === 'medium') {
        rect(obstacle.x + 10, obstacle.y - 10, 10, 10);
        rect(obstacle.x, obstacle.y - 5, 10, 5);
      } else { // large
        rect(obstacle.x + 15, obstacle.y - 15, 10, 15);
        rect(obstacle.x + 5, obstacle.y - 10, 10, 10);
        rect(obstacle.x - 5, obstacle.y - 5, 10, 5);
      }
    } else if (obstacle.type === 'bird') {
      // Animate bird wings
      obstacle.animationFrame = (frameCount % 20 < 10) ? 0 : 1;
      
      // Draw bird (pixel art)
      fill(150, 80, 80);
      if (obstacle.animationFrame === 0) {
        // Wings up
        rect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        triangle(obstacle.x + 30, obstacle.y, 
                 obstacle.x + 40, obstacle.y - 10, 
                 obstacle.x + 40, obstacle.y + 10);
      } else {
        // Wings down
        rect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        triangle(obstacle.x + 30, obstacle.y + obstacle.height, 
                 obstacle.x + 40, obstacle.y + obstacle.height - 10, 
                 obstacle.x + 40, obstacle.y + obstacle.height + 10);
      }
      
      // Eye
      fill(255);
      rect(obstacle.x + 5, obstacle.y + 5, 3, 3);
    }
    
    pop();
  }
  
  // Draw dino
  dino.draw();
  
  // Draw score
  push();
  fill(50);
  textSize(24);
  textAlign(RIGHT, TOP);
  text(score, width - 20, 20);
  pop();
  
  // Draw instructions during gameplay
  push();
  fill(50, 150);
  textSize(12);
  textAlign(LEFT, TOP);
  text('UP: Jump | DOWN: Duck', 20, 20);
  pop();
}

function drawGameOver() {
  // Draw the game screen first
  drawGame();
  
  // Overlay
  push();
  fill(0, 150);
  rect(0, 0, width, height);
  
  // Game over text
  fill(255);
  textSize(32);
  textAlign(CENTER, CENTER);
  text('GAME OVER', width/2, height/2 - 40);
  
  // Score
  textSize(24);
  text('Score: ' + score, width/2, height/2);
  
  // High score
  if (score === highScore && score > 0) {
    textSize(18);
    text('NEW HIGH SCORE!', width/2, height/2 + 30);
  } else if (highScore > 0) {
    textSize(18);
    text('High Score: ' + highScore, width/2, height/2 + 30);
  }
  
  // Restart instructions
  textSize(16);
  text('Press SPACE to restart', width/2, height/2 + 70);
  pop();
}

// Helper drawing functions
function drawSky() {
  // Sky gradient
  for (let y = 0; y < height - groundHeight; y++) {
    let inter = map(y, 0, height - groundHeight, 0, 1);
    let c = lerpColor(color(135, 206, 235), color(25, 25, 112), inter);
    stroke(c);
    line(0, y, width, y);
  }
}

function drawGround() {
  // Ground
  fill(180, 150, 100);
  rect(0, height - groundHeight, width, groundHeight);
  
  // Ground tiles
  fill(160, 130, 80);
  for (let tile of groundTiles) {
    // Simple ground pattern
    rect(tile.x, height - groundHeight, 50, groundHeight);
    
    // Add some details
    for (let i = 0; i < 5; i++) {
      point(tile.x + random(50), height - groundHeight + random(groundHeight));
    }
  }
}

function drawMountains() {
  for (let mountain of mountains) {
    // Mountain color changes with distance (parallax effect)
    let mountainColor = color(
      50 + mountain.speed * 30,
      50 + mountain.speed * 30,
      50 + mountain.speed * 30
    );
    
    fill(mountainColor);
    beginShape();
    vertex(mountain.x, height - groundHeight);
    vertex(mountain.x + mountain.width/2, height - groundHeight - mountain.height);
    vertex(mountain.x + mountain.width, height - groundHeight);
    endShape(CLOSE);
    
    // Snow caps on some mountains
    if (mountain.height > 80) {
      fill(240);
      beginShape();
      vertex(mountain.x + mountain.width/3, height - groundHeight - mountain.height + 10);
      vertex(mountain.x + mountain.width/2, height - groundHeight - mountain.height);
      vertex(mountain.x + mountain.width * 2/3, height - groundHeight - mountain.height + 10);
      vertex(mountain.x + mountain.width/2, height - groundHeight - mountain.height + 20);
      endShape(CLOSE);
    }
  }
}

function drawClouds() {
  for (let cloud of clouds) {
    fill(255, 255, 255, 200);
    ellipse(cloud.x + cloud.width * 0.3, cloud.y, cloud.width * 0.6, cloud.width * 0.4);
    ellipse(cloud.x + cloud.width * 0.7, cloud.y, cloud.width * 0.6, cloud.width * 0.4);
    ellipse(cloud.x + cloud.width * 0.5, cloud.y - cloud.width * 0.1, cloud.width * 0.6, cloud.width * 0.4);
  }
}

function drawStars() {
  for (let star of stars) {
    fill(255, 255, 255, map(star.speed, 0.1, 0.3, 100, 255));
    rect(star.x, star.y, star.size, star.size);
    
    // Make some stars twinkle
    if (random() < 0.01) {
      star.size = random(1, 3);
    }
  }
}
```

## Game Features:

1. **Pixelated Dinosaur Character**:
   - Runs with animated legs
   - Can jump (space/up arrow) and duck (down arrow)
   - Cute pixel art design

2. **Parallax Backgrounds**:
   - Starry night sky with twinkling stars
   - Distant mountains with snow caps
   - Fluffy clouds moving at different speeds
   - Ground with texture details

3. **Obstacles**:
   - Various sized cacti
   - Flying birds with wing animations

4. **Game Progression**:
   - Score increases over time
   - Game speed gradually increases
   - High score tracking

5. **Game States**:
   - Menu screen with instructions
   - Main gameplay
   - Game over screen with restart option

6. **Controls**:
   - Space/Up Arrow: Jump or start game
   - Down Arrow: Duck

The game is entirely self-contained in the p5.js sketch with no external dependencies or HTML required. Just copy this code into a p5.js editor and run it! [end of text]


