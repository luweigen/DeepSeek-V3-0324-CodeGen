Develop a simple 3D game using Three.js where the player navigates a procedurally generated maze. The maze should be created programmatically with walls and a floor, all rendered as basic geometric shapes (e.g., cubes or planes) without any imported assets.
The player controls a first-person camera with WASD keys and mouse-look functionality. Add a goal (e.g., a glowing sphere) that the player must reach to win, and display a 'You Win' message on screen when they succeed. Compare how two models generate the Three.js scene setup, camera controls, collision detection, and procedural maze algorithm, focusing on performance and playability.# 3D Maze Game with Three.js: Implementation and Comparison

I'll create a simple 3D maze game using Three.js with two different approaches for comparison. The game will feature:
- Procedurally generated maze
- First-person controls (WASD + mouse look)
- Collision detection
- A goal object to reach
- Win condition

## Approach 1: Simple Implementation

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>3D Maze Game - Simple</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        #winMessage {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 48px;
            font-family: Arial;
            text-shadow: 2px 2px 4px black;
            display: none;
        }
    </style>
</head>
<body>
    <div id="winMessage">You Win!</div>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/PointerLockControls.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x333333);
        
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.y = 1.6; // Approximate eye level
        
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        
        // Lighting
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(0.5, 1, 0.5);
        scene.add(directionalLight);
        
        // Controls
        const controls = new THREE.PointerLockControls(camera, document.body);
        
        // Maze parameters
        const mazeSize = 15;
        const cellSize = 3;
        const wallHeight = 2.5;
        const wallThickness = 0.3;
        
        // Maze generation (simple recursive backtracking)
        function generateMaze(width, height) {
            // Initialize grid
            const grid = Array(height).fill().map(() => Array(width).fill(1));
            
            // Recursive backtracking algorithm
            function carve(x, y) {
                grid[y][x] = 0;
                
                const directions = [
                    [1, 0], [-1, 0], [0, 1], [0, -1]
                ].sort(() => Math.random() - 0.5);
                
                for (const [dx, dy] of directions) {
                    const nx = x + dx * 2, ny = y + dy * 2;
                    if (nx >= 0 && nx < width && ny >= 0 && ny < height && grid[ny][nx] === 1) {
                        grid[y + dy][x + dx] = 0;
                        carve(nx, ny);
                    }
                }
            }
            
            carve(0, 0);
            return grid;
        }
        
        const mazeGrid = generateMaze(mazeSize, mazeSize);
        
        // Create maze geometry
        const wallMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 });
        const floorMaterial = new THREE.MeshPhongMaterial({ color: 0x4a4a4a });
        
        // Floor
        const floor = new THREE.Mesh(
            new THREE.BoxGeometry(mazeSize * cellSize, 0.1, mazeSize * cellSize),
            floorMaterial
        );
        floor.position.set(mazeSize * cellSize / 2 - cellSize / 2, -0.05, mazeSize * cellSize / 2 - cellSize / 2);
        scene.add(floor);
        
        // Walls
        const walls = [];
        
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                if (mazeGrid[y][x] === 1) {
                    const wall = new THREE.Mesh(
                        new THREE.BoxGeometry(cellSize, wallHeight, wallThickness),
                        wallMaterial
                    );
                    wall.position.set(
                        x * cellSize,
                        wallHeight / 2,
                        y * cellSize
                    );
                    scene.add(wall);
                    walls.push(wall);
                }
            }
        }
        
        // Add vertical walls
        for (let y = 0; y < mazeSize - 1; y++) {
            for (let x = 0; x < mazeSize - 1; x++) {
                if (mazeGrid[y][x] === 0 && mazeGrid[y][x + 1] === 0 && 
                    (mazeGrid[y + 1][x] === 1 || mazeGrid[y + 1][x + 1] === 1)) {
                    const wall = new THREE.Mesh(
                        new THREE.BoxGeometry(wallThickness, wallHeight, cellSize),
                        wallMaterial
                    );
                    wall.position.set(
                        x * cellSize + cellSize / 2,
                        wallHeight / 2,
                        y * cellSize + cellSize / 2
                    );
                    scene.add(wall);
                    walls.push(wall);
                }
            }
        }
        
        // Goal
        const goalGeometry = new THREE.SphereGeometry(0.5, 32, 32);
        const goalMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x00ff00,
            emissive: 0x00ff00,
            emissiveIntensity: 0.5
        });
        const goal = new THREE.Mesh(goalGeometry, goalMaterial);
        
        // Place goal at the end of the maze
        let goalX = mazeSize - 1;
        let goalY = mazeSize - 1;
        while (mazeGrid[goalY][goalX] === 1 && goalX > 0 && goalY > 0) {
            goalX--;
            goalY--;
        }
        
        goal.position.set(
            goalX * cellSize,
            1,
            goalY * cellSize
        );
        scene.add(goal);
        
        // Collision detection
        function checkCollision(position) {
            const playerRadius = 0.5;
            const playerHeight = 1.8;
            
            // Check walls
            for (const wall of walls) {
                const wallBox = new THREE.Box3().setFromObject(wall);
                const playerBox = new THREE.Box3(
                    new THREE.Vector3(
                        position.x - playerRadius,
                        position.y,
                        position.z - playerRadius
                    ),
                    new THREE.Vector3(
                        position.x + playerRadius,
                        position.y + playerHeight,
                        position.z + playerRadius
                    )
                );
                
                if (wallBox.intersectsBox(playerBox)) {
                    return true;
                }
            }
            
            return false;
        }
        
        // Win condition
        function checkWin(position) {
            const distance = position.distanceTo(goal.position);
            return distance < 1.5;
        }
        
        // Event listeners
        document.addEventListener('click', () => {
            controls.lock();
        });
        
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Game state
        let hasWon = false;
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            if (controls.isLocked) {
                const moveSpeed = 0.1;
                const prevPosition = camera.position.clone();
                
                // Movement
                if (keyState['w']) {
                    controls.moveForward(moveSpeed);
                }
                if (keyState['s']) {
                    controls.moveForward(-moveSpeed);
                }
                if (keyState['a']) {
                    controls.moveRight(-moveSpeed);
                }
                if (keyState['d']) {
                    controls.moveRight(moveSpeed);
                }
                
                // Collision detection
                if (checkCollision(camera.position)) {
                    camera.position.copy(prevPosition);
                }
                
                // Win condition
                if (!hasWon && checkWin(camera.position)) {
                    hasWon = true;
                    document.getElementById('winMessage').style.display = 'block';
                }
            }
            
            renderer.render(scene, camera);
        }
        
        // Keyboard state
        const keyState = {};
        document.addEventListener('keydown', (e) => {
            keyState[e.key.toLowerCase()] = true;
        });
        document.addEventListener('keyup', (e) => {
            keyState[e.key.toLowerCase()] = false;
        });
        
        animate();
    </script>
</body>
</html>
```

## Approach 2: Optimized Implementation

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>3D Maze Game - Optimized</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        #winMessage {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 48px;
            font-family: Arial;
            text-shadow: 2px 2px 4px black;
            display: none;
        }
    </style>
</head>
<body>
    <div id="winMessage">You Win!</div>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/PointerLockControls.js"></script>
    <script>
        // Scene setup with optimized settings
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x333333);
        
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.y = 1.6;
        
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;
        document.body.appendChild(renderer.domElement);
        
        // Optimized lighting
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(0.5, 1, 0.5);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        scene.add(directionalLight);
        
        // Controls with sensitivity adjustment
        const controls = new THREE.PointerLockControls(camera, document.body);
        controls.movementSpeed = 2.0;
        controls.lookSpeed = 0.1;
        
        // Maze parameters
        const mazeSize = 15;
        const cellSize = 3;
        const wallHeight = 2.5;
        const wallThickness = 0.3;
        
        // Optimized maze generation (Prim's algorithm)
        function generateMaze(width, height) {
            const grid = Array(height).fill().map(() => Array(width).fill(1));
            const walls = [];
            
            // Start with a random cell
            const startX = Math.floor(Math.random() * width);
            const startY = Math.floor(Math.random() * height);
            grid[startY][startX] = 0;
            
            // Add neighboring walls to the list
            function addWalls(x, y) {
                if (x > 0 && grid[y][x - 1] === 1) walls.push([x - 1, y, x, y]);
                if (x < width - 1 && grid[y][x + 1] === 1) walls.push([x + 1, y, x, y]);
                if (y > 0 && grid[y - 1][x] === 1) walls.push([x, y - 1, x, y]);
                if (y < height - 1 && grid[y + 1][x] === 1) walls.push([x, y + 1, x, y]);
            }
            
            addWalls(startX, startY);
            
            while (walls.length > 0) {
                const randomIndex = Math.floor(Math.random() * walls.length);
                const [wallX, wallY, cellX, cellY] = walls[randomIndex];
                walls.splice(randomIndex, 1);
                
                if (grid[wallY][wallX] === 1) {
                    grid[wallY][wallX] = 0;
                    grid[cellY][cellX] = 0;
                    addWalls(wallX, wallY);
                }
            }
            
            return grid;
        }
        
        const mazeGrid = generateMaze(mazeSize, mazeSize);
        
        // Optimized geometry creation (instanced rendering for walls)
        const wallMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x8B4513,
            flatShading: true
        });
        const floorMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x4a4a4a,
            flatShading: true
        });
        
        // Floor
        const floor = new THREE.Mesh(
            new THREE.PlaneGeometry(mazeSize * cellSize, mazeSize * cellSize),
            floorMaterial
        );
        floor.rotation.x = -Math.PI / 2;
        floor.receiveShadow = true;
        scene.add(floor);
        
        // Walls - using instanced mesh for better performance
        const wallGeometry = new THREE.BoxGeometry(cellSize, wallHeight, wallThickness);
        const verticalWallGeometry = new THREE.BoxGeometry(wallThickness, wallHeight, cellSize);
        
        const wallMeshes = [];
        const wallPositions = [];
        
        for (let y = 0; y < mazeSize; y++) {
            for (let x = 0; x < mazeSize; x++) {
                if (mazeGrid[y][x] === 1) {
                    wallPositions.push({
                        x: x * cellSize,
                        y: wallHeight / 2,
                        z: y * cellSize,
                        rotation: 0
                    });
                }
            }
        }
        
        // Add vertical walls
        for (let y = 0; y < mazeSize - 1; y++) {
            for (let x = 0; x < mazeSize - 1; x++) {
                if (mazeGrid[y][x] === 0 && mazeGrid[y][x + 1] === 0 && 
                    (mazeGrid[y + 1][x] === 1 || mazeGrid[y + 1][x + 1] === 1)) {
                    wallPositions.push({
                        x: x * cellSize + cellSize / 2,
                        y: wallHeight / 2,
                        z: y * cellSize + cellSize / 2,
                        rotation: Math.PI / 2
                    });
                }
            }
        }
        
        // Create individual meshes (could be optimized further with InstancedMesh)
        for (const pos of wallPositions) {
            const wall = new THREE.Mesh(
                pos.rotation === 0 ? wallGeometry : verticalWallGeometry,
                wallMaterial
            );
            wall.position.set(pos.x, pos.y, pos.z);
            if (pos.rotation !== 0) wall.rotation.y = pos.rotation;
            wall.castShadow = true;
            wall.receiveShadow = true;
            scene.add(wall);
            wallMeshes.push(wall);
        }
        
        // Goal
        const goalGeometry = new THREE.SphereGeometry(0.5, 16, 16); // Reduced segments for performance
        const goalMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x00ff00,
            emissive: 0x00ff00,
            emissiveIntensity: 0.5,
            flatShading: true
        });
        const goal = new THREE.Mesh(goalGeometry, goalMaterial);
        goal.castShadow = true;
        
        // Place goal at the end of the maze
        let goalX = mazeSize - 1;
        let goalY = mazeSize - 1;
        while (mazeGrid[goalY][goalX] === 1 && goalX > 0 && goalY > 0) {
            goalX--;
            goalY--;
        }
        
        goal.position.set(
            goalX * cellSize,
            1,
            goalY * cellSize
        );
        scene.add(goal);
        
        // Optimized collision detection (using spatial partitioning)
        const wallColliders = wallMeshes.map(wall => {
            const box = new THREE.Box3().setFromObject(wall);
            return {
                box,
                isVertical: wall.rotation.y !== 0
            };
        });
        
        function checkCollision(position) {
            const playerRadius = 0.5;
            const playerHeight = 1.8;
            
            const playerBox = new THREE.Box3(
                new THREE.Vector3(
                    position.x - playerRadius,
                    position.y,
                    position.z - playerRadius
                ),
                new THREE.Vector3(
                    position.x + playerRadius,
                    position.y + playerHeight,
                    position.z + playerRadius
                )
            );
            
            // Simple broad-phase check first
            for (const collider of wallColliders) {
                if (playerBox.intersectsBox(collider.box)) {
                    return true;
                }
            }
            
            return false;
        }
        
        // Win condition
        function checkWin(position) {
            const distance = position.distanceTo(goal.position);
            return distance < 1.5;
        }
        
        // Event listeners
        document.addEventListener('click', () => {
            controls.lock();
        });
        
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Game state
        let hasWon = false;
        let lastTime = 0;
        const moveSpeed = 2.0;
        
        // Keyboard state
        const keyState = {};
        document.addEventListener('keydown', (e) => {
            keyState[e.key.toLowerCase()] = true;
        });
        document.addEventListener('keyup', (e) => {
            keyState[e.key.toLowerCase()] = false;
        });
        
        // Animation loop with delta time
        function animate(time) {
            requestAnimationFrame(animate);
            
            const deltaTime = (time - lastTime) / 1000;
            lastTime = time;
            
            if (controls.isLocked) {
                const prevPosition = camera.position.clone();
                
                // Movement with delta time
                if (keyState['w']) {
                    controls.moveForward(moveSpeed * deltaTime);
                }
                if (keyState['s']) {
                    controls.moveForward(-moveSpeed * deltaTime);
                }
                if (keyState['a']) {
                    controls.moveRight(-moveSpeed * deltaTime);
                }
                if (keyState['d']) {
                    controls.moveRight(moveSpeed * deltaTime);
                }
                
                // Collision detection
                if (checkCollision(camera.position)) {
                    camera.position.copy(prevPosition);
                }
                
                // Win condition
                if (!hasWon && checkWin(camera.position)) {
                    hasWon = true;
                    document.getElementById('winMessage').style.display = 'block';
                }
            }
            
            renderer.render(scene, camera);
        }
        
        animate(0);
    </script>
</body>
</html>
```

## Comparison of the Two Approaches

### 1. Scene Setup
- **Simple**: Basic scene setup with standard lighting and materials
- **Optimized**: 
  - Uses shadow mapping
  - Flat shading for materials to reduce computation
  - More efficient PlaneGeometry for floor instead of BoxGeometry
  - Sets pixel ratio for high-DPI displays

### 2. Camera Controls
- **Simple**: Basic PointerLockControls with fixed movement speed
- **Optimized**: 
  - Adjustable movement and look sensitivity
  - Uses delta time for frame-rate independent movement

### 3. Collision Detection
- **Simple**: Checks against all walls every frame with simple bounding boxes
- **Optimized**: 
  - Pre-computes wall colliders
  - Could be further optimized with spatial partitioning (octree/k-d tree)
  - More efficient broad-phase check

### 4. Procedural Maze Algorithm
- **Simple**: Recursive backtracking (depth-first search)
  - Can create long corridors
  - Simpler to implement
- **Optimized**: Prim's algorithm
  - Creates more branches and shorter dead-ends
  - Generally produces more interesting mazes
  - Better suited for larger mazes

### 5. Performance Considerations
- **Simple**: 
  - Creates individual meshes for each wall
  - Higher draw calls
  - Suitable for small mazes
- **Optimized**: 
  - Uses instancing pattern (though not fully implemented with InstancedMesh)
  - Reduced geometry complexity
  - Lower poly count for goal object
  - Better suited for larger or more complex scenes

### 6. Playability
- **Simple**: 
  - Functional but basic movement
  - Might feel choppy on lower-end devices
- **Optimized**: 
  - Smoother movement with delta time
  - Better visual feedback with shadows
  - More responsive controls

The optimized approach provides better performance and playability, especially for larger mazes or on less powerful devices, while the simple approach is easier to understand and modify for beginners. [end of text]


