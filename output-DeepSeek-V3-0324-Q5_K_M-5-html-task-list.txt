Create a website application that allows users to manage a personal task list. The application should include a front-end interface built with HTML, CSS, and JavaScript, and a back-end that stores tasks in a JSON file as a simple database. Users should be able to add, edit, delete, and mark tasks as complete. Include features like sorting tasks by priority
(low, medium, high) and filtering by completion status. Ensure the JSON file is updated in real-time as tasks are modified, and provide a clean, responsive Ul with a modern design.# Personal Task Manager Web Application

Here's a complete implementation of a personal task manager with frontend and backend functionality.

## File Structure
```
task-manager/
│── public/
│   ├── index.html
│   ├── style.css
│   └── script.js
│── tasks.json
│── server.js
└── package.json
```

## Backend Implementation (server.js)

```javascript
const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = 3000;
const DATA_FILE = path.join(__dirname, 'tasks.json');

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Initialize tasks file if it doesn't exist
if (!fs.existsSync(DATA_FILE)) {
    fs.writeFileSync(DATA_FILE, '[]', 'utf8');
}

// Helper function to read tasks
const readTasks = () => {
    try {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        console.error('Error reading tasks:', err);
        return [];
    }
};

// Helper function to write tasks
const writeTasks = (tasks) => {
    try {
        fs.writeFileSync(DATA_FILE, JSON.stringify(tasks, null, 2), 'utf8');
    } catch (err) {
        console.error('Error writing tasks:', err);
    }
};

// API Endpoints
app.get('/api/tasks', (req, res) => {
    const tasks = readTasks();
    res.json(tasks);
});

app.post('/api/tasks', (req, res) => {
    const tasks = readTasks();
    const newTask = {
        id: Date.now().toString(),
        title: req.body.title,
        description: req.body.description || '',
        priority: req.body.priority || 'medium',
        completed: false,
        createdAt: new Date().toISOString()
    };
    tasks.push(newTask);
    writeTasks(tasks);
    res.status(201).json(newTask);
});

app.put('/api/tasks/:id', (req, res) => {
    const tasks = readTasks();
    const taskId = req.params.id;
    const taskIndex = tasks.findIndex(task => task.id === taskId);
    
    if (taskIndex === -1) {
        return res.status(404).json({ error: 'Task not found' });
    }
    
    tasks[taskIndex] = {
        ...tasks[taskIndex],
        title: req.body.title || tasks[taskIndex].title,
        description: req.body.description || tasks[taskIndex].description,
        priority: req.body.priority || tasks[taskIndex].priority,
        completed: req.body.completed !== undefined ? req.body.completed : tasks[taskIndex].completed
    };
    
    writeTasks(tasks);
    res.json(tasks[taskIndex]);
});

app.delete('/api/tasks/:id', (req, res) => {
    const tasks = readTasks();
    const taskId = req.params.id;
    const filteredTasks = tasks.filter(task => task.id !== taskId);
    
    if (tasks.length === filteredTasks.length) {
        return res.status(404).json({ error: 'Task not found' });
    }
    
    writeTasks(filteredTasks);
    res.status(204).end();
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
```

## Frontend Implementation

### HTML (index.html)
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Task Manager</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Personal Task Manager</h1>
            <div class="controls">
                <div class="filter-controls">
                    <select id="filter-status">
                        <option value="all">All Tasks</option>
                        <option value="completed">Completed</option>
                        <option value="active">Active</option>
                    </select>
                    <select id="filter-priority">
                        <option value="all">All Priorities</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <button id="sort-by-priority" class="btn">Sort by Priority</button>
            </div>
        </header>

        <div class="task-form">
            <input type="text" id="task-title" placeholder="Task title..." required>
            <input type="text" id="task-description" placeholder="Description (optional)">
            <select id="task-priority">
                <option value="medium">Medium Priority</option>
                <option value="high">High Priority</option>
                <option value="low">Low Priority</option>
            </select>
            <button id="add-task" class="btn btn-primary">Add Task</button>
        </div>

        <div class="task-list" id="task-list">
            <!-- Tasks will be loaded here -->
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

### CSS (style.css)
```css
:root {
    --primary-color: #4a6fa5;
    --secondary-color: #166088;
    --accent-color: #4fc3f7;
    --light-color: #f8f9fa;
    --dark-color: #343a40;
    --success-color: #28a745;
    --warning-color: #ffc107;
    --danger-color: #dc3545;
    --border-radius: 5px;
    --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f5f5f5;
    color: var(--dark-color);
    line-height: 1.6;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

header {
    margin-bottom: 30px;
    text-align: center;
}

header h1 {
    color: var(--secondary-color);
    margin-bottom: 20px;
}

.controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 10px;
}

.filter-controls {
    display: flex;
    gap: 10px;
}

select, input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    font-size: 16px;
}

.btn {
    padding: 10px 15px;
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 16px;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background-color: var(--secondary-color);
}

.btn-secondary {
    background-color: var(--light-color);
    color: var(--dark-color);
    border: 1px solid #ddd;
}

.btn-secondary:hover {
    background-color: #e9ecef;
}

.task-form {
    display: flex;
    gap: 10px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.task-form input[type="text"] {
    flex: 1;
    min-width: 200px;
}

.task-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.task {
    background-color: white;
    padding: 15px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    display: flex;
    flex-direction: column;
    gap: 10px;
    transition: all 0.3s ease;
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.task-title {
    font-weight: bold;
    font-size: 18px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.task.completed .task-title {
    text-decoration: line-through;
    color: #6c757d;
}

.task-description {
    color: #6c757d;
    margin-bottom: 10px;
}

.task-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.task-actions {
    display: flex;
    gap: 10px;
}

.priority {
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
}

.priority-high {
    background-color: var(--danger-color);
    color: white;
}

.priority-medium {
    background-color: var(--warning-color);
    color: var(--dark-color);
}

.priority-low {
    background-color: var(--success-color);
    color: white;
}

.task-date {
    font-size: 12px;
    color: #6c757d;
}

/* Responsive design */
@media (max-width: 768px) {
    .task-form {
        flex-direction: column;
    }
    
    .controls {
        flex-direction: column;
        align-items: stretch;
    }
    
    .filter-controls {
        flex-direction: column;
    }
}
```

### JavaScript (script.js)
```javascript
document.addEventListener('DOMContentLoaded', () => {
    const taskList = document.getElementById('task-list');
    const taskTitleInput = document.getElementById('task-title');
    const taskDescriptionInput = document.getElementById('task-description');
    const taskPrioritySelect = document.getElementById('task-priority');
    const addTaskBtn = document.getElementById('add-task');
    const filterStatusSelect = document.getElementById('filter-status');
    const filterPrioritySelect = document.getElementById('filter-priority');
    const sortPriorityBtn = document.getElementById('sort-by-priority');

    let tasks = [];
    let sortDirection = 'desc'; // Default: high to low priority

    // Fetch tasks from server
    const fetchTasks = async () => {
        try {
            const response = await fetch('/api/tasks');
            tasks = await response.json();
            renderTasks();
        } catch (error) {
            console.error('Error fetching tasks:', error);
        }
    };

    // Render tasks based on filters
    const renderTasks = () => {
        const statusFilter = filterStatusSelect.value;
        const priorityFilter = filterPrioritySelect.value;

        let filteredTasks = [...tasks];

        // Apply status filter
        if (statusFilter === 'completed') {
            filteredTasks = filteredTasks.filter(task => task.completed);
        } else if (statusFilter === 'active') {
            filteredTasks = filteredTasks.filter(task => !task.completed);
        }

        // Apply priority filter
        if (priorityFilter !== 'all') {
            filteredTasks = filteredTasks.filter(task => task.priority === priorityFilter);
        }

        // Sort by priority if needed
        if (sortPriorityBtn.classList.contains('active')) {
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            filteredTasks.sort((a, b) => {
                return sortDirection === 'desc' 
                    ? priorityOrder[b.priority] - priorityOrder[a.priority]
                    : priorityOrder[a.priority] - priorityOrder[b.priority];
            });
        } else {
            // Default sort by creation date (newest first)
            filteredTasks.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        }

        // Clear task list
        taskList.innerHTML = '';

        // Add tasks to DOM
        filteredTasks.forEach(task => {
            const taskElement = document.createElement('div');
            taskElement.className = `task ${task.completed ? 'completed' : ''}`;
            taskElement.innerHTML = `
                <div class="task-header">
                    <div class="task-title">
                        <input type="checkbox" ${task.completed ? 'checked' : ''} data-id="${task.id}">
                        ${task.title}
                    </div>
                    <span class="priority priority-${task.priority}">${task.priority}</span>
                </div>
                ${task.description ? `<div class="task-description">${task.description}</div>` : ''}
                <div class="task-footer">
                    <div class="task-date">${new Date(task.createdAt).toLocaleString()}</div>
                    <div class="task-actions">
                        <button class="btn btn-secondary edit-btn" data-id="${task.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-secondary delete-btn" data-id="${task.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            taskList.appendChild(taskElement);
        });

        // Add event listeners to checkboxes, edit and delete buttons
        document.querySelectorAll('.task input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', toggleTaskComplete);
        });

        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', editTask);
        });

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', deleteTask);
        });
    };

    // Add new task
    const addTask = async () => {
        const title = taskTitleInput.value.trim();
        const description = taskDescriptionInput.value.trim();
        const priority = taskPrioritySelect.value;

        if (!title) {
            alert('Please enter a task title');
            return;
        }

        try {
            const response = await fetch('/api/tasks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    title,
                    description,
                    priority
                })
            });

            if (response.ok) {
                taskTitleInput.value = '';
                taskDescriptionInput.value = '';
                fetchTasks();
            }
        } catch (error) {
            console.error('Error adding task:', error);
        }
    };

    // Toggle task completion status
    const toggleTaskComplete = async (e) => {
        const taskId = e.target.dataset.id;
        const completed = e.target.checked;

        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    completed
                })
            });

            if (response.ok) {
                fetchTasks();
            }
        } catch (error) {
            console.error('Error updating task:', error);
        }
    };

    // Edit task
    const editTask = async (e) => {
        const taskId = e.target.closest('button').dataset.id;
        const task = tasks.find(t => t.id === taskId);

        const newTitle = prompt('Edit task title:', task.title);
        if (newTitle === null) return;

        const newDescription = prompt('Edit task description:', task.description);
        const newPriority = prompt('Edit priority (high, medium, low):', task.priority);

        if (!['high', 'medium', 'low'].includes(newPriority)) {
            alert('Priority must be high, medium, or low');
            return;
        }

        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    title: newTitle,
                    description: newDescription,
                    priority: newPriority
                })
            });

            if (response.ok) {
                fetchTasks();
            }
        } catch (error) {
            console.error('Error updating task:', error);
        }
    };

    // Delete task
    const deleteTask = async (e) => {
        const taskId = e.target.closest('button').dataset.id;
        if (!confirm('Are you sure you want to delete this task?')) return;

        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                fetchTasks();
            }
        } catch (error) {
            console.error('Error deleting task:', error);
        }
    };

    // Toggle sort by priority
    const toggleSortByPriority = () => {
        sortPriorityBtn.classList.toggle('active');
        sortDirection = sortDirection === 'desc' ? 'asc' : 'desc';
        renderTasks();
    };

    // Event listeners
    addTaskBtn.addEventListener('click', addTask);
    taskTitleInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') addTask();
    });

    filterStatusSelect.addEventListener('change', renderTasks);
    filterPrioritySelect.addEventListener('change', renderTasks);
    sortPriorityBtn.addEventListener('click', toggleSortByPriority);

    // Initial load
    fetchTasks();
});
```

## package.json
```json
{
  "name": "personal-task-manager",
  "version": "1.0.0",
  "description": "A simple personal task manager application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}
```

## Setup Instructions

1. Create a new directory for your project and navigate into it:
   ```bash
   mkdir task-manager
   cd task-manager
   ```

2. Initialize a new Node.js project:
   ```bash
   npm init -y
   ```

3. Install the required dependencies:
   ```bash
   npm install express cors
   npm install --save-dev nodemon
   ```

4. Create the file structure as shown above and copy the code into each file.

5. Start the development server:
   ```bash
   npm run dev
   ```

6. Open your browser and navigate to `http://localhost:3000`

## Features Implemented

1. **Task Management**:
   - Add new tasks with title, description, and priority
   - Edit existing tasks
   - Delete tasks
   - Mark tasks as complete/incomplete

2. **Filtering**:
   - Filter by completion status (all, completed, active)
   - Filter by priority (all, high, medium, low)

3. **Sorting**:
   - Sort tasks by priority (high to low or low to high)

4. **Responsive Design**:
   - Works on mobile and desktop devices
   - Clean, modern UI with intuitive controls

5. **Real-time Updates**:
   - All changes are immediately saved to the JSON file
   - UI updates without page refresh

The application provides a complete solution for personal task management with a clean interface and all the requested functionality. [end of text]


